<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SAI DEV Portfolio - Neon Tokyo</title>
  <link rel="stylesheet" href="/styles.css">
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;700&display=swap" rel="stylesheet">
  <!-- Load Three.js from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <style>
    /* Global Styles for Black/White/Gray Theme */
    body {
      background-color: #000;
      color: #eee;
      font-family: 'Montserrat', sans-serif;
      margin: 0;
      padding: 0;
      overflow-x: hidden;
    }
    a { color: #aaa; text-decoration: none; }
    
    /* Collapsible Menu Styles */
    .menu-toggle {
      display: inline-block;
      cursor: pointer;
      font-size: 1.5rem;
      color: #aaa;
    }
    .menu {
      display: none;
      flex-direction: column;
      background: transparent;
      position: absolute;
      top: 60px;
      right: 20px;
      padding: 10px;
      border: 1px solid #888;
      z-index: 3;
    }
    .menu.open {
      display: flex;
    }
    .menu a {
      padding: 10px;
      border-bottom: 1px solid #888;
    }
    .menu a:last-child {
      border-bottom: none;
    }
    
    header {
      background: transparent;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px;
      border-bottom: none;
      position: relative;
      z-index: 2;
    }
    /* Remove header title (if any) */
    header .site-title {
      display: none;
    }
    nav {
      position: relative;
    }
    /* Hero Section with subdued gradient */
    .hero {
      background: linear-gradient(135deg, #000, #222 70%);
      background-size: 200% 200%;
      animation: gradientShift 10s ease infinite;
      padding: 100px 20px;
      text-align: center;
      position: relative;
      overflow: hidden;
      z-index: 2;
    }
    .hero h2 { font-size: 3em; color: #fff; margin-bottom: 20px; }
    
    /* Section Styling with Smooth Slide-in & Transparent Background */
    .section {
      padding: 60px 20px;
      max-width: 1100px;
      margin: 0 auto;
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
      position: relative;
      z-index: 2;
      background: transparent;
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 1s ease, transform 1s ease;
    }
    .section.visible {
      opacity: 1;
      transform: none;
    }
    .section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url('https://via.placeholder.com/800x600') repeat;
      opacity: 0.02;
      pointer-events: none;
      transform: translateZ(0);
    }
    .section:nth-child(even) {
      flex-direction: row-reverse;
    }
    .section img {
      width: 100%;
      max-width: 500px;
      margin: 20px;
      border: 5px solid #888;
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 1s ease, transform 1s ease;
    }
    .section img.visible {
      opacity: 1;
      transform: none;
    }
    .section .content {
      flex: 1;
      min-width: 280px;
      margin: 20px;
    }
    /* Tech Stack Section stays transparent */
    .tech-stack {
      background: transparent;
      padding: 60px 20px;
      text-align: center;
      position: relative;
      z-index: 2;
    }
    .tech-stack h2 { color: #fff; margin-bottom: 40px; }
    .tech-stack .stack-items {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
    }
    .tech-stack .stack-item {
      background: #222;
      margin: 10px;
      padding: 20px;
      border-radius: 8px;
      width: 150px;
      transition: transform 0.3s;
    }
    .tech-stack .stack-item:hover { transform: scale(1.1); }
    .tech-stack .stack-item img { width: 50px; height: 50px; margin-bottom: 10px; }
    footer {
      background: transparent;
      text-align: center;
      padding: 20px;
      color: #777;
      position: relative;
      z-index: 2;
    }
    
    /* Title Overlay with Glitch Effect updated for grayscale */
    #titleOverlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.95);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 3;
      transition: opacity 1s ease;
    }
    #titleOverlay.hidden {
      opacity: 0;
      pointer-events: none;
    }
    .title-container h1 {
      font-size: 4em;
      color: #fff;
      position: relative;
    }
    /* Glitch effect using pseudo-elements in gray scale */
    .title-container h1::before,
    .title-container h1::after {
      content: attr(data-text);
      position: absolute;
      left: 0;
      top: 0;
      opacity: 0.7;
      color: #fff;
      clip: rect(0, 900px, 0, 0);
      animation: glitch 2s infinite linear alternate-reverse;
    }
    .title-container h1::after {
      animation-delay: -1s;
    }
    @keyframes glitch {
      0% { clip: rect(5px, 9999px, 45px, 0); transform: translate(0); }
      10% { clip: rect(15px, 9999px, 25px, 0); transform: translate(-2px, 2px); }
      20% { clip: rect(10px, 9999px, 50px, 0); transform: translate(2px, -2px); }
      30% { clip: rect(20px, 9999px, 30px, 0); transform: translate(-2px, 0); }
      40% { clip: rect(5px, 9999px, 40px, 0); transform: translate(2px, 2px); }
      50% { clip: rect(15px, 9999px, 25px, 0); transform: translate(0, -2px); }
      60% { clip: rect(5px, 9999px, 45px, 0); transform: translate(2px, 0); }
      70% { clip: rect(10px, 9999px, 50px, 0); transform: translate(-2px, 2px); }
      80% { clip: rect(20px, 9999px, 30px, 0); transform: translate(0, 2px); }
      90% { clip: rect(5px, 9999px, 45px, 0); transform: translate(-2px, -2px); }
      100% { clip: rect(15px, 9999px, 25px, 0); transform: translate(2px, 0); }
    }
    /* Set overlay cursor to pointer */
    #titleOverlay .title-container {
      cursor: pointer;
    }
    
    /* Three.js Canvas Styling */
    #threejs-canvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      pointer-events: none;
    }
    /* Additional Neon Futuristic Animations now subdued */
    @keyframes gradientShift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    /* Removed neonOutline animation for header */
    @keyframes neonOutline {
      from { border-color: #888; }
      to { border-color: #fff; }
    }
  </style>
</head>
<body>
  <!-- Three.js Canvas (Particle & Multiple 3D Background Elements) -->
  <canvas id="threejs-canvas"></canvas>
  <!-- Title Overlay -->
  <div id="titleOverlay">
    <div class="title-container">
      <h1 data-text="SAI DEV">SAI DEV</h1>
      <p>Click or scroll to enter</p>
    </div>
  </div>
  <header class="fade-in">
    <!-- Collapsible Menu Icon -->
    <div class="menu-toggle" id="menuToggle">&#9776;</div>
    <!-- Collapsible Menu -->
    <nav>
      <div class="menu" id="menu">
        <a href="#hero">Home</a>
        <a href="#about">About</a>
        <a href="#projects">Projects</a>
        <a href="#tech">Tech Stack</a>
        <a href="#contact">Contact</a>
      </div>
    </nav>
  </header>
  <!-- Hero Section -->
  <section class="hero fade-in" id="hero">
    <h2>AI/ML Engineer</h2>
    <p>Futuristic solutions in AI, Machine Learning, and Beyond</p>
    <img src="https://via.placeholder.com/600x300/111/bd00ff?text=Dynamic+Hero+Image" alt="Dynamic Hero Image">
  </section>
  <!-- About Section -->
  <section class="section fade-in" id="about">
    <div class="content">
      <h2>About Me</h2>
      <p>Hello! I'm an AI/ML Engineer dedicated to innovative technology and futuristic design. I merge art with technology to build dynamic, minimalistic experiences.</p>
      <p id="about-dynamic">[Dynamic text about my journey will appear here]</p>
    </div>
    <img src="https://via.placeholder.com/500x400/2a2a2a/bd00ff?text=Profile+Image" alt="Profile Image">
  </section>
  <!-- Projects Section -->
  <section class="section fade-in" id="projects">
    <div class="content">
      <h2>Featured Projects</h2>
      <div class="project-card">
        <h3>ML Projects</h3>
        <p>Detailing machine learning experiments with dynamic charts and results.</p>
        <img src="https://via.placeholder.com/400x250/333/bd00ff?text=ML+Project" alt="ML Project">
      </div>
      <div class="project-card">
        <h3>DL Projects</h3>
        <p>Deep learning innovations and creative model architectures.</p>
        <img src="https://via.placeholder.com/400x250/333/bd00ff?text=DL+Project" alt="DL Project">
      </div>
      <div class="project-card">
        <h3>Deployment & Operations</h3>
        <p>Robust solutions for scalable deployments and seamless operations.</p>
        <img src="https://via.placeholder.com/400x250/333/bd00ff?text=Deployment" alt="Deployment Project">
      </div>
      <div class="project-card">
        <h3>RAG Based Project</h3>
        <p>Revolutionizing information retrieval through innovative RAG systems.</p>
        <img src="https://via.placeholder.com/400x250/333/bd00ff?text=RAG+Project" alt="RAG Project">
      </div>
      <div class="project-card">
        <h3>GENAI Tools</h3>
        <p>Showcasing cutting-edge generative AI tools for creative solutions.</p>
        <img src="https://via.placeholder.com/400x250/333/bd00ff?text=GENAI+Tools" alt="GENAI Tools">
      </div>
      <div class="project-card">
        <h3>AI Agent Systems</h3>
        <p>Integrating smart AI agents for autonomous operations.</p>
        <img src="https://via.placeholder.com/400x250/333/bd00ff?text=AI+Agents" alt="AI Agent Systems">
      </div>
    </div>
  </section>
  <!-- Tech Stack Section -->
  <section class="tech-stack fade-in" id="tech">
    <h2>Tech Stack</h2>
    <div class="stack-items">
      <div class="stack-item">
        <img src="https://via.placeholder.com/50/bd00ff/fff?text=Node" alt="Node.js">
        <p>Node.js</p>
      </div>
      <div class="stack-item">
        <img src="https://via.placeholder.com/50/bd00ff/fff?text=Express" alt="Express">
        <p>Express</p>
      </div>
      <div class="stack-item">
        <img src="https://via.placeholder.com/50/bd00ff/fff?text=React" alt="React">
        <p>React</p>
      </div>
      <div class="stack-item">
        <img src="https://via.placeholder.com/50/bd00ff/fff?text=MongoDB" alt="MongoDB">
        <p>MongoDB</p>
      </div>
      <div class="stack-item">
        <img src="https://via.placeholder.com/50/bd00ff/fff?text=Docker" alt="Docker">
        <p>Docker</p>
      </div>
    </div>
  </section>
  <!-- Contact Section -->
  <section class="section fade-in" id="contact">
    <div class="content">
      <h2>Contact Me</h2>
      <p>Interested in potential collaborations or just want to say hi? Feel free to reach out.</p>
      <p>Email: <a href="mailto:sai.dev@example.com">sai.dev@example.com</a></p>
    </div>
    <img src="https://via.placeholder.com/500x400/2a2a2a/bd00ff?text=Contact+Image" alt="Contact Image">
  </section>
  <footer class="fade-in">
    <p>&copy; 2023 SAI DEV</p>
  </footer>
  <script>
    // Overlay functionality with scroll reset
    window.onload = function() {
      console.log('Window loaded');
      var overlay = document.getElementById('titleOverlay');
      function hideOverlay() {
        if (overlay && !overlay.classList.contains('hidden')) {
          console.log('Hiding overlay');
          overlay.classList.add('hidden');
          window.scrollTo(0,0);
          setTimeout(function() {
            overlay.style.display = 'none';
            console.log('Overlay hidden, scroll reset');
          }, 1000);
        }
      }
      overlay.addEventListener('click', hideOverlay);
      window.addEventListener('scroll', function() {
        if (window.scrollY > 30) {
          console.log('Scrolled, hiding overlay');
          hideOverlay();
        }
      });
      // Intersection Observer for smooth reveal of sections & images
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            // Also reveal images within the section
            entry.target.querySelectorAll('img').forEach(img => img.classList.add('visible'));
          }
        });
      }, { threshold: 0.3 });
      document.querySelectorAll('.section').forEach(section => {
        observer.observe(section);
      });
      // Fallback for any additional fade-in elements
      var fadeIns = document.querySelectorAll('.fade-in');
      fadeIns.forEach(function(el, index) {
        setTimeout(function() {
          el.classList.add('visible');
        }, 300 * (index + 1));
      });
    };

    // Collapsible Menu Toggle
    document.getElementById('menuToggle').addEventListener('click', function() {
      var menu = document.getElementById('menu');
      menu.classList.toggle('open');
    });

    // Three.js Particle & Multiple 3D Background Setup
    (function() {
      var canvas = document.getElementById('threejs-canvas');
      var renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      var scene = new THREE.Scene();
      var camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.z = 5;
      
      // Particle system for background with grayscale particles
      var particlesCount = 800;
      var particleGeometry = new THREE.BufferGeometry();
      var positions = new Float32Array(particlesCount * 3);
      for (let i = 0; i < particlesCount * 3; i++) {
        positions[i] = (Math.random() - 0.5) * 30;
      }
      particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
      var particleMaterial = new THREE.PointsMaterial({ color: 0xaaaaaa, size: 0.1 });
      var particles = new THREE.Points(particleGeometry, particleMaterial);
      scene.add(particles);
      
      // Additional rotating torus in white wireframe
      var torusGeometry = new THREE.TorusGeometry(1.5, 0.2, 16, 100);
      var torusMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
      var torus = new THREE.Mesh(torusGeometry, torusMaterial);
      torus.position.x = -4;
      scene.add(torus);
      
      // Rotating cube with grayscale material
      var cubeGeometry = new THREE.BoxGeometry(3, 3, 3);
      var cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xcccccc, wireframe: false });
      var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
      cube.position.x = 4;
      scene.add(cube);
      
      // New: Neural Network Connection Lines
      var networkGeometry = new THREE.BufferGeometry();
      var networkLinesCount = 500;
      var networkPositions = new Float32Array(networkLinesCount * 6);
      for (let i = 0; i < networkLinesCount; i++) {
        let x1 = (Math.random() - 0.5) * 30;
        let y1 = (Math.random() - 0.5) * 30;
        let z1 = (Math.random() - 0.5) * 30;
        let x2 = x1 + (Math.random() - 0.5) * 5;
        let y2 = y1 + (Math.random() - 0.5) * 5;
        let z2 = z1 + (Math.random() - 0.5) * 5;
        networkPositions[i * 6 + 0] = x1;
        networkPositions[i * 6 + 1] = y1;
        networkPositions[i * 6 + 2] = z1;
        networkPositions[i * 6 + 3] = x2;
        networkPositions[i * 6 + 4] = y2;
        networkPositions[i * 6 + 5] = z2;
      }
      networkGeometry.setAttribute('position', new THREE.BufferAttribute(networkPositions, 3));
      var networkMaterial = new THREE.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });
      var networkLines = new THREE.LineSegments(networkGeometry, networkMaterial);
      scene.add(networkLines);
      
      function animate() {
        requestAnimationFrame(animate);
        particles.rotation.y += 0.0005;
        torus.rotation.x += 0.005;
        torus.rotation.y += 0.005;
        cube.rotation.x += 0.003;
        cube.rotation.y += 0.003;
        networkLines.rotation.y += 0.001; // subtle rotation for network lines
        renderer.render(scene, camera);
      }
      animate();
      
      window.addEventListener('resize', function() {
        renderer.setSize(window.innerWidth, window.innerHeight);
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
      });
      
      // Update camera position based on scroll percentage
      window.addEventListener('scroll', function() {
        var scrollPercent = window.scrollY / (document.body.scrollHeight - window.innerHeight);
        camera.position.z = 5 + scrollPercent * 10;
      });
    })();
  </script>
</body>
</html> 